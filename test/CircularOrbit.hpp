/*
 *    This file is part of chrysaor.
 *    copyright (c) 2016 Roman Lebedev.
 *
 *    chrysaor is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    chrysaor is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with chrysaor.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "src/CelestialBody.hpp"    // for CelestialBody
#include <gtest/gtest-param-test.h> // for ParamIteratorInterface, ValuesIn
#include <gtest/gtest.h>            // for TestWithParam
#include <iostream>                 // for operator<<, basic_ostream, basic...

struct CircularOrbitData {
  // this we know:
  CelestialBody *body;
  double altitude;
  double velocity;

  // this we can calculate:
  double sma;
  double epsilon;
  double srh;
  double ecc; // CircularOrbit, so 0.0

  friend std::ostream &operator<<(std::ostream &os,
                                  const CircularOrbitData &obj) {
    return os << "altitude: " << obj.altitude << ", velocity: " << obj.velocity
              << "; SMA: " << obj.sma << ", eps: " << obj.epsilon
              << ", srh: " << obj.srh << ", ecc: " << obj.ecc;
  }
};

extern CelestialBody Kerbin;
extern CelestialBody Earth;

// the data is autogenerated, see math/test/generate-circularorbit-params.sage

static const struct CircularOrbitData KerbinCircularOrbitData[] = {
    CircularOrbitData{&Kerbin, 0.00000000000000000000000000000000000000,
                      2426.1079942986875721544492989778518677,
                      600000.00000000000000000000000000000000,
                      -2.9429999999999995343387126922607421875e6,
                      1.4556647965792124271392822265625000000e9,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Kerbin, 70000.000000000000000000000000000000000,
                      2295.8756011856135046400595456361770630,
                      670000.00000000000000000000000000000000,
                      -2.6355223880597013048827648162841796875e6,
                      1.5382366527943611145019531250000000000e9,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Kerbin, 100000.00000000000000000000000000000000,
                      2246.1395453405957596260122954845428467,
                      700000.00000000000000000000000000000000,
                      -2.5225714285714281722903251647949218750e6,
                      1.5722976817384171485900878906250000000e9,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Kerbin, 2.8633340600000000000000000000000000000e6,
                      1009.8074305900465787999564781785011292,
                      3.4633340600000000558793544769287109375e6,
                      -509855.52343743585515767335891723632812,
                      3.4973004684035944938659667968750000000e9,
                      0.00000000000000000000000000000000000000}};

static const struct CircularOrbitData EarthCircularOrbitData[] = {
    CircularOrbitData{&Earth, 0.00000000000000000000000000000000000000,
                      7905.3659669038524953066371381282806396,
                      6.3781365999999996274709701538085937500e6,
                      -3.1247405535340841859579086303710937500e7,
                      5.0421504009903846740722656250000000000e10,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Earth, 160000.00000000000000000000000000000000,
                      7808.0375433456320024561136960983276367,
                      6.5381365999999996274709701538085937500e6,
                      -3.0482725139147445559501647949218750000e7,
                      5.1050016036322158813476562500000000000e10,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Earth, 250000.00000000000000000000000000000000,
                      7754.8457313704493572004139423370361328,
                      6.6281365999999996274709701538085937500e6,
                      -3.0068816158677238970994949340820312500e7,
                      5.1400176819450241088867187500000000000e10,
                      0.00000000000000000000000000000000000000},
    CircularOrbitData{&Earth, 3.5786000000000000000000000000000000000e7,
                      3074.6613035946002128184773027896881104,
                      4.2164136600000001490116119384765625000e7,
                      -4.7267710659110229462385177612304687500e6,
                      1.2964043920349679565429687500000000000e11,
                      0.00000000000000000000000000000000000000}};

class CircularOrbitTest : public ::testing::TestWithParam<CircularOrbitData> {};

INSTANTIATE_TEST_CASE_P(Kerbin, CircularOrbitTest,
                        testing::ValuesIn(KerbinCircularOrbitData));

INSTANTIATE_TEST_CASE_P(Earth, CircularOrbitTest,
                        testing::ValuesIn(EarthCircularOrbitData));
